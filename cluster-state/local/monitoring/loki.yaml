apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: loki-global
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: https://grafana.github.io/helm-charts
    chart: loki
    targetRevision: "5.2.0"
    helm:
      values: |
        fullnameOverride: loki-global

        loki:
          labels:
            cf-proxy: "false"
          image:
            registry: docker.io
            repository: grafana/loki
            tag: "2.8.0"
          revisionHistoryLimit: 3

          # -- Config file contents for Loki
          # @default -- See values.yaml
          config: |
            {{- if .Values.enterprise.enabled}}
            {{- tpl .Values.enterprise.config . }}
            {{- else }}
            auth_enabled: {{ .Values.loki.auth_enabled }}
            {{- end }}

            {{- with .Values.loki.server }}
            server:
              {{- toYaml . | nindent 2}}
            {{- end}}

            memberlist:
              join_members:
                - {{ include "loki.memberlist" . }}
                {{- with .Values.migrate.fromDistributed }}
                {{- if .enabled }}
                - {{ .memberlistService }}
                {{- end }}
                {{- end }}

            {{- with .Values.loki.ingester }}
            ingester:
              {{- tpl (. | toYaml) $ | nindent 4 }}
            {{- end }}

            {{- if .Values.loki.commonConfig}}
            common:
            {{- toYaml .Values.loki.commonConfig | nindent 2}}
              storage:
              {{- include "loki.commonStorageConfig" . | nindent 4}}
            {{- end}}

            {{- with .Values.loki.limits_config }}
            limits_config:
              {{- tpl (. | toYaml) $ | nindent 4 }}
            {{- end }}

            runtime_config:
              file: /etc/loki/runtime-config/runtime-config.yaml

            {{- with .Values.loki.memcached.chunk_cache }}
            {{- if and .enabled (or .host .addresses) }}
            chunk_store_config:
              chunk_cache_config:
                memcached:
                  batch_size: {{ .batch_size }}
                  parallelism: {{ .parallelism }}
                memcached_client:
                  {{- if .host }}
                  host: {{ .host }}
                  {{- end }}
                  {{- if .addresses }}
                  addresses: {{ .addresses }}
                  {{- end }}
                  service: {{ .service }}
            {{- end }}
            {{- end }}

            {{- if .Values.loki.schemaConfig}}
            schema_config:
            {{- toYaml .Values.loki.schemaConfig | nindent 2}}
            {{- else }}
            schema_config:
              configs:
                - from: 2022-01-11
                  store: boltdb-shipper
                  object_store: {{ .Values.loki.storage.type }}
                  schema: v12
                  index:
                    prefix: loki_index_
                    period: 24h
            {{- end }}

            {{ include "loki.rulerConfig" . }}

            table_manager:
              retention_deletes_enabled: false
              retention_period: 0

            {{- with .Values.loki.memcached.results_cache }}
            query_range:
              align_queries_with_step: true
              {{- if and .enabled (or .host .addresses) }}
              cache_results: {{ .enabled }}
              results_cache:
                cache:
                  default_validity: {{ .default_validity }}
                  memcached_client:
                    {{- if .host }}
                    host: {{ .host }}
                    {{- end }}
                    {{- if .addresses }}
                    addresses: {{ .addresses }}
                    {{- end }}
                    service: {{ .service }}
                    timeout: {{ .timeout }}
              {{- end }}
            {{- end }}

            {{- with .Values.loki.storage_config }}
            storage_config:
              {{- tpl (. | toYaml) $ | nindent 4 }}
            {{- end }}

            {{- with .Values.loki.query_scheduler }}
            query_scheduler:
              {{- tpl (. | toYaml) $ | nindent 4 }}
            {{- end }}

            {{- with .Values.loki.compactor }}
            compactor:
              {{- tpl (. | toYaml) $ | nindent 4 }}
            {{- end }}

            {{- with .Values.loki.analytics }}
            analytics:
              {{- tpl (. | toYaml) $ | nindent 4 }}
            {{- end }}

            {{- with .Values.loki.querier }}
            querier:
              {{- tpl (. | toYaml) $ | nindent 4 }}
            {{- end }}

          server:
            http_server_read_timeout: 60s
            http_server_write_timeout: 60s
            grpc_server_max_recv_msg_size: 10485760
            grpc_server_max_send_msg_size: 10485760
            log_format: json

          # Should authentication be enabled
          auth_enabled: false

          commonConfig:
            replication_factor: 1

          # Limits config
          limits_config:
            enforce_metric_name: false
            reject_old_samples: true
            reject_old_samples_max_age: 168h
            max_cache_freshness_per_query: 10m
            split_queries_by_interval: 15m
            max_query_series: 5000
            max_query_length: 744h
            query_timeout: 2m
            retention_period: 2232h

          compactor:
            retention_enabled: true
            retention_delete_delay: 2h
            retention_delete_worker_count: 150
            shared_store: filesystem
            compaction_interval: 10m
            working_directory: /var/loki/compactor

          storage:
            type: filesystem

        serviceAccount:
          create: true

        test:
          enabled: true
        # Monitoring section determines which monitoring features to enable
        monitoring:
          # Dashboards for monitoring Loki
          dashboards:
            enabled: true
            namespace: monitoring
            labels:
              grafana_dashboard: "1"
          rules:
            enabled: true
            alerting: true
            namespace: monitoring
            additionalGroups: []
          # ServiceMonitor configuration
          serviceMonitor:
            enabled: true
            labels:
              prometheus: main
          selfMonitoring:
            enabled: true
            tenant:
              name: "self-monitoring"
              secretNamespace: "{{ .Release.Namespace }}"
            grafanaAgent:
              installOperator: true
          # The Loki canary pushes logs to and queries from this loki installation to test
          # that it's working correctly
          lokiCanary:
            enabled: true
        tableManager:
          enabled: false
        singleBinary:
          replicas: 1
        ingress:
          enabled: false

        # Configuration for the gateway
        gateway:
          enabled: true
          replicas: 1
          verboseLogging: true
          image:
            registry: docker.io
            repository: nginxinc/nginx-unprivileged
            tag: 1.19-alpine
            pullPolicy: IfNotPresent
          resources:
            requests:
              cpu: "100m"
              memory: 100Mi

  destination:
    name: in-cluster
    namespace: monitoring
  ignoreDifferences:
    - kind: StatefulSet
      group: apps
      name: loki-backend
      namespace: monitoring
      jqPathExpressions:
        - .spec.persistentVolumeClaimRetentionPolicy
  syncPolicy:
    syncOptions:
    - RespectIgnoreDifferences=true
    automated:
      selfHeal: true